# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential libx11-dev libxext-dev libxtst-dev libxrandr-dev libgnutls28-dev libfltk1.3-dev libpixman-1-dev libjpeg-dev libgnutls28-dev libnettle-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure
      
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        # Artifact name
        name: tigervnc-build-${{ env.BUILD_TYPE }}
        # A file, directory or wildcard pattern that describes what to upload
        path: |
          ${{github.workspace}}/build/vncviewer/vncviewer
          ${{github.workspace}}/build/unix/xvnc/Xvnc
          ${{github.workspace}}/build/unix/vncpasswd/vncpasswd
          ${{github.workspace}}/build/unix/vncconfig/vncconfig
        # The desired behavior if no files are found using the provided path.
        if-no-files-found: warn
        # Duration after which artifact will expire in days. 0 means using default retention.
        retention-days: 30
        # The level of compression for Zlib to be applied to the artifact archive.
        compression-level: 6
        # If true, an artifact with a matching name will be deleted before a new one is uploaded.
        overwrite: false
        # If true, hidden files will be included in the artifact.
        include-hidden-files: false 
